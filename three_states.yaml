# There are three states: A, B and C
# whose demand is 5000, 7000 and 4000 (MWh peer year)


name: three_states
objective: max

domains:
  new_capacity_to_be_installed:
    values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  capacity_factor:
    values: [0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]
  max_transmission_capacity_A_B:
    values: [0, 500, 1000, 1500, 2000]
  max_transmission_capacity_B_C:
    values: [0, 500, 1000, 1500]


variables:
  solarCapacityA:
    domain: new_capacity_to_be_installed
    agent: a1
  solarCapacityB:
    domain: new_capacity_to_be_installed
    agent: b1
  solarCapacityC:
    domain: new_capacity_to_be_installed
    agent: c1
  gasCapacityA:
    domain: new_capacity_to_be_installed
    agent: a2
  gasCapacityB:
    domain: new_capacity_to_be_installed
    agent: b2
  gasCapacityC:
    domain: new_capacity_to_be_installed
    agent: c2
  gasFactorA:
    domain: capacity_factor
    agent: a3
  gasFactorB:
    domain: capacity_factor
    agent: b3
  gasFactorC:
    domain: capacity_factor
    agent: c3
  transmissionAB:
    domain: max_transmission_capacity_A_B
    agent: d1
  transmissionBA:
    domain: max_transmission_capacity_A_B
    agent: d2
  transmissionBC:
    domain: max_transmission_capacity_B_C
    agent: d3
  transmissionCB:
    domain: max_transmission_capacity_B_C
    agent: d4

constraints:
  # Demand constraints
  demand_A:
    type: intention
    function: |
      if solarCapacityA * 1000 + gasCapacityA * gasFactorA * 8760 + transmissionBA - transmissionAB >= 5000:
        return 0
      else: 
        return -10000
  demand_B:
    type: intention
    function: |
      if solarCapacityB * 1000 + gasCapacityB * gasFactorB * 8760 - transmissionBA + transmissionAB - transmissionBC + transmissionCB >= 7000:
        return 0
      else: 
        return -10000 
         
  demand_C:
    type: intention
    function: |
      if solarCapacityC * 1000 + gasCapacityC * gasFactorC *  8760 + transmissionBC - transmissionCB >= 4000:
        return 0
      else:
        return -10000

# Limits on the Capacity to install
  gas_installed_capacity_A:
    type: intention
    function: |
      if gasCapacityA >= 1:
        return 0
      else:
        return -10000
  gas_installed_capacity_B:
    type: intention
    function: |
      if gasCapacityB >= 2:
        return 0
      else:
        return -10000
  gas_installed_capacity_C:
    type: intention
    function: |
      if gasCapacityC >= 1:
        return 0
      else:
        return -10000
  solar_installed_capacity_A:
    type: intention
    function: |
      if solarCapacityA <= 5:
        return 0
      else:
        return -10000
  solar_installed_capacity_B:
    type: intention
    function: |
      if solarCapacityB <= 2:
        return 0
      else:
        return -10000 
  solar_installed_capacity_C:
    type: intention
    function: |
      if solarCapacityC <= 8:
        return 0
      else:
        return -10000

# Emission Cap
  emissions_penalty_max_A:
    type: intention
    function: |
      return -10000 / (1 + (2.71828 ** -((gasCapacityA * gasFactorA * 8760 * 0.5 - 670) / 100)))
  emissions_penalty_max_B:
    type: intention
    function: |
      return -10000 / (1 + (2.71828 ** -((gasCapacityB * gasFactorB * 8760 * 0.5 - 670) / 100)))
  emissions_penalty_max_C:
    type: intention
    function: |
      return -10000 / (1 + (2.71828 ** -((gasCapacityC * gasFactorC * 8760 * 0.5 - 670) / 100)))

# Total cost to minimize - Without the following constraints, the model finds my solution
  total_cost_solarA:
    type: intention
    function: |
      solarInvestmentCost = 300  
      solarOperatingCost = 10
      gasInvestmentCost = 150
      gasOperatingCost = 20
      transmissionCost = 0
      gasExistingCapacityA = 1  
      gasExistingCapacityB = 2
      gasExistingCapacityC = 1
      
      cost = (
        solarInvestmentCost * solarCapacityA + solarOperatingCost * solarCapacityA * 1000 
      )
      
      return -cost/100  # Minimization objective
  
  total_cost_gasA:
    type: intention
    function: |
      solarInvestmentCost = 300  
      solarOperatingCost = 10
      gasInvestmentCost = 150
      gasOperatingCost = 20
      transmissionCost = 0
      gasExistingCapacityA = 1  
      gasExistingCapacityB = 2
      gasExistingCapacityC = 1
      
      cost = (
        gasInvestmentCost * (gasCapacityA - gasExistingCapacityA) + gasOperatingCost * gasCapacityA * gasFactorA * 8760 
      )
      
      return -cost/100  # Minimization objective
  
    total_cost_solarB:
      type: intention
      function: |
        solarInvestmentCost = 300  
        solarOperatingCost = 10
        gasInvestmentCost = 150
        gasOperatingCost = 20
        transmissionCost = 0
        gasExistingCapacityA = 1  
        gasExistingCapacityB = 2
        gasExistingCapacityC = 1
        
        cost = (
          solarInvestmentCost * solarCapacityB + solarOperatingCost * solarCapacityB * 1000 +
        )
        
        return -cost/100  # Minimization objective   

    total_cost_gasB:
      type: intention
      function: |
        solarInvestmentCost = 300  
        solarOperatingCost = 10
        gasInvestmentCost = 150
        gasOperatingCost = 20
        transmissionCost = 0
        gasExistingCapacityA = 1  
        gasExistingCapacityB = 2
        gasExistingCapacityC = 1
        
        cost = (
          gasInvestmentCost * (gasCapacityB - gasExistingCapacityB) + gasOperatingCost * gasCapacityB * gasFactorB * 8760 +
        )
        
        return -cost/100  # Minimization objective
  
    total_cost_solarC:
      type: intention
      function: |
        solarInvestmentCost = 300  
        solarOperatingCost = 10
        gasInvestmentCost = 150
        gasOperatingCost = 20
        transmissionCost = 0
        gasExistingCapacityA = 1  
        gasExistingCapacityB = 2
        gasExistingCapacityC = 1
        
        cost = (
          solarInvestmentCost * solarCapacityC + solarOperatingCost * solarCapacityC * 1000 +
        )
        
        return -cost/100   
  
    total_cost_gasC:
      type: intention
      function: |
        solarInvestmentCost = 300  
        solarOperatingCost = 10
        gasInvestmentCost = 150
        gasOperatingCost = 20
        transmissionCost = 0
        gasExistingCapacityA = 1  
        gasExistingCapacityB = 2
        gasExistingCapacityC = 1
        
        cost = (
          gasInvestmentCost * (gasCapacityC - gasExistingCapacityC) + gasOperatingCost * gasCapacityC * gasFactorC * 8760 +
        )
        
        return -cost/100

  total_cost_transmissionsAB:
      type: intention
      function: |
        solarInvestmentCost = 300  
        solarOperatingCost = 10
        gasInvestmentCost = 150
        gasOperatingCost = 20
        transmissionCost = 0
        gasExistingCapacityA = 1  
        gasExistingCapacityB = 2
        gasExistingCapacityC = 1
        
        cost = (
          transmissionCost * (transmissionAB + transmissionBA)
        )
        
        return -cost/100

  total_cost_transmissionsBC:
      type: intention
      function: |
        solarInvestmentCost = 300  
        solarOperatingCost = 10
        gasInvestmentCost = 150
        gasOperatingCost = 20
        transmissionCost = 0
        gasExistingCapacityA = 1  
        gasExistingCapacityB = 2
        gasExistingCapacityC = 1
        
        cost = (
          transmissionCost * (transmissionAB + transmissionBA + transmissionBC + transmissionCB)
        )
        return -cost/100


agents: [a1, a2, a3, b1, b2, b3, c1, c2, c3, d1, d2, d3, d4]

name: three_states
objective: min

domains:
  new_capacity_to_be_installed:
    values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  max_transmission_capacity_A_B:
    values: [0, 500, 1000, 1500, 2000]
  max_transmission_capacity_B_C:
    values: [0, 500, 1000, 1500]

variables:
  SolarCapacityA:
    domain: new_capacity_to_be_installed
    agent: a1
  SolarCapacityB:
    domain: new_capacity_to_be_installed
    agent: a2
  SolarCapacityC:
    domain: new_capacity_to_be_installed
    agent: a3

  GasCapacityA:
    domain: new_capacity_to_be_installed
    agent: b1
  GasCapacityB:
    domain: new_capacity_to_be_installed
    agent: b2
  GasCapacityC:
    domain: new_capacity_to_be_installed
    agent: b3

  TransmissionAB:
    domain: max_transmission_capacity_A_B
    agent: c1
  TransmissionBA:
    domain: max_transmission_capacity_A_B
    agent: c2
  TransmissionBC:
    domain: max_transmission_capacity_B_C
    agent: c3
  TransmissionCB:
    domain: max_transmission_capacity_B_C
    agent: c4

constraints:
  # Demand constraints
    demand_A:
      type: intention
      function: |
        generated = SolarCapacityA * 1000 + GasCapacityA * 8760
        transmission = TransmissionBA - TransmissionAB
        demand_gap = 5000 - (generated + transmission)
        if demand_gap < 0:
          return abs(demand_gap)
        else:
          return-1
    demand_B:
      type: intention
      function: |
        generated = SolarCapacityB * 1000 + GasCapacityB * 8760
        transmission = - TransmissionBA + TransmissionAB - TransmissionBC + TransmissionCB
        demand_gap = 7000 - (generated + transmission)
        if demand_gap < 0:
          return abs(demand_gap)
        else:
          return -1
    demand_C:
      type: intention
      function: |
        generated = SolarCapacityC * 1000 + GasCapacityC * 8760
        transmission = - TransmissionCB + TransmissionBC
        demand_gap = 4000 - (generated + transmission)
        if demand_gap < 0:
          return abs(demand_gap)
        else:
          return -1
  
  # Limits on the Capacity to install
    gas_installed_capacity_A:
      type: intention
      function: |
        if GasCapacityA >= 1:
          return 0
        else:
          return abs(1 - GasCapacityA) * 1000
    gas_installed_capacity_B:
      type: intention
      function: |
        if GasCapacityB >= 1:
          return 0
        else:
          return abs(1 - GasCapacityB) * 1000
    gas_installed_capacity_C:
      type: intention
      function: |
        if GasCapacityC >= 1:
          return 0
        else:
          return abs(1 - GasCapacityC) * 1000

    solar_installed_capacity_A:
      type: intention
      function: |
        if SolarCapacityA <= 5:
          return 0
        else:
          return abs(1 - SolarCapacityA) * 1000
    solar_installed_capacity_B:
      type: intention
      function: |
        if SolarCapacityB <= 2:
          return 0
        else:
          return abs(1 - SolarCapacityB) * 1000
    solar_installed_capacity_C:
      type: intention
      function: |
        if SolarCapacityC <= 8:
          return 0
        else:
          return abs(1 - SolarCapacityC) * 1000

  # Emission Cap
    total_emissions:
      type: intention
      function: |
        if (GasCapacityA + GasCapacityB + GasCapacityC) * 8760 * 0.5 <= 2000:
          return 0
        else: 
          return +10000


agents: [a1, a2, a3, b1, b2, b3, c1, c2, c3, c4]
